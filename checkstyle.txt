Starting audit...
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/common/Constants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/common/Constants.java:21:29: Name 'XP_FORMULA_2_' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/common/Constants.java:21:42: '=' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:18:23: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:24:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:32:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:34:40: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:46:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'increaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'increaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:47:32: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:47:36: 'damageReceived' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:51:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'calculateHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'calculateHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:57:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:62:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'setDamageReceived' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'setDamageReceived' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:63:35: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:67:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:72:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:77:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:82:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:87:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:95:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:97: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:97:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:104:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:105:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:109:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:111:30: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:112:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:113:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:114:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Pyromancer.java:118:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'displayRace' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'displayRace' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:6: Class HeroFactory should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:8:28: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:8:28: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:10:32: Parameter heroType should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:10:49: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:11:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:15:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:17:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:19:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/HeroFactory.java:21:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:15:17: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:23: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:25:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getLocationHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getLocationHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:29:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setLocationHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setLocationHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:29:36: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:33:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'move' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'move' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:33:22: Parameter moveChar should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:34:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:35:56: '-' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:35:57: '-' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:36:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:37:56: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:37:57: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:38:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:39:56: '-' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:39:57: '-' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:40:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:41:56: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:41:57: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:47:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:51:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:55:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:59:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:59:23: Parameter xp should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:63:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:67:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:67:26: Parameter level should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:71:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:78:45: 'damageReceived' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:84:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'increaseXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'increaseXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:84:28: Parameter hero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:86:55: '-' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:92:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:94:24: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:95:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:96:36: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Hero.java:97:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:18:19: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:24:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:32:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:34:77: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:46:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:51:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'increaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'increaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:52:32: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:52:36: 'damageReceived' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:56:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'calculateHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'calculateHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:62:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'setDamageReceived' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'setDamageReceived' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:63:35: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:67:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:72:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:77:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:82:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:87:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:95:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:97: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:97:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:104:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:105:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:109:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:111:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:112:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:113:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:114:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Wizard.java:118:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'displayRace' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'displayRace' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:4:1: Redundant import from the same package - heroes.Hero. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:18:18: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:24:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:40:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:42:75: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:46:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:57:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'increaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'increaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:58:32: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:58:36: 'damageReceived' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:62:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'calculateHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'calculateHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:68:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'setDamageReceived' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'setDamageReceived' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:69:35: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:73:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:78:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:83:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:88:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:93:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:101:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:103: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:103:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:110:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:111:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:115:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:117:25: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:118:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:119:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:120:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Rogue.java:124:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'displayRace' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'displayRace' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:18:19: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:24:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:32:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:38:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:43:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:48:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:53:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:58:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:63:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:71:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:73: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:73:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:80:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'play' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'play' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:96:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:97:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:103:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'increaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'increaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:104:32: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:104:36: 'damageReceived' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:108:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'calculateHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'calculateHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:114:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'setDamageReceived' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'setDamageReceived' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:115:35: Parameter damageReceived should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:119:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:121:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:122:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:123:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:124:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/heroes/Knight.java:128:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'displayRace' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'displayRace' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:3:1: Redundant import from the same package - main.LocationHistory. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19: Line is longer than 100 characters (found 197). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:12: More than 7 parameters (found 8). [ParameterNumber]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:22: Parameter numberOfLines should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:41: Parameter numberOfColumns should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:62: Parameter map should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:76: Parameter numberOfHeroes should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:96: Parameter heroes should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:120: Parameter locationHistories should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:161: Parameter numberOfRounds should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:19:181: Parameter moves should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:30:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:34:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfColumns' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfColumns' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:38:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:42:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfHeroes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfHeroes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:46:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getHeroes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getHeroes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:50:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getLocationHistories' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getLocationHistories' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:54:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:58:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getMoves' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getMoves' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:62:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:64:29: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:65:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:66:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:67:49: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:68:53: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:69:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:70:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:71:60: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInput.java:72:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:6:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:8:42: Parameter hero1 should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:8:54: Parameter hero2 should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:9:51: '==' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:10:51: '&&' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameLogic.java:11:51: '==' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:15:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:17:29: Parameter args should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:32:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:41:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:46:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:53:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:70:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:71:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:76:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:77:19: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:77:80: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:77:81: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:78: Line is longer than 100 characters (found 132). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:80:37: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:80:38: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:85:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:93:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/Main.java:112: Line has trailing spaces. [RegexpSingleline]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:7:28: Parameter x should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:7:35: Parameter y should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:12:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'getX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'getX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:16:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'setX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'setX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:16:22: Parameter x should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:20:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'getY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'getY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:24:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'setY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'setY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:24:22: Parameter y should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:28:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:30:35: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:31:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/LocationHistory.java:32:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameOutputLoader.java:3:8: Unused import - java.io.FileWriter. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameOutputLoader.java:4:8: Unused import - java.io.IOException. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameOutputLoader.java:5:8: Unused import - java.io.PrintWriter. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:4:1: Redundant import from the same package - main.GameInput. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:5:1: Redundant import from the same package - main.GameInputLoader. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:8: Class GameInfo should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:15:25: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:15:25: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:17:22: Parameter gameInputLoader should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:19:22: 'map' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInfo.java:29:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:4:1: Redundant import from the same package - main.LocationHistory. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:14:28: Parameter inputPath should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:14:46: Parameter outputPath should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:19:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'load' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'load' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:24:33: '1000' is a magic number. [MagicNumber]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:25:35: '1000' is a magic number. [MagicNumber]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:39:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:41:20: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:48:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:53: Line is longer than 100 characters (found 113). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:53:92: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:62:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:65:20: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/main/GameInputLoader.java:80: Line is longer than 100 characters (found 132). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:3: Class MapSingleton should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:7:29: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:7:29: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:9:22: Parameter map should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:9:31: 'map' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapSingleton.java:18:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/map/MapBlocks.java:3:54: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:18:20: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:20:75: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:22:57: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:27:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:31:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:35:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:36:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:38:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:40:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:45:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:46:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:46:30: 'knight' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:47:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:49:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:55:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:56:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:57:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:59:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:63:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:64:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:65:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:67:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Execute.java:71:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:13:17: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:15:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:17:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:22:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:26:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:30:22: Parameter hero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:36:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:37:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:38:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:40:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:44:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:45:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:45:30: 'knight' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:46:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:48:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:55:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:56:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:57:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:59:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:63:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:64:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:65:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:67:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/KnightSkills/Slam.java:71:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:18:19: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:20:74: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:22:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:28:60: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:30:64: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:35:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:39:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:43:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getDamageOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getDamageOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:47:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getDamageOvertimePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getDamageOvertimePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:51:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:52:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:52:34: 'pyromancer' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:54:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:56:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:60:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:61:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:63:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:65:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:70:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:71:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:73:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:75:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:80:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:81:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:83:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:85:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:16:22: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:18:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:20:59: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:25:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:29:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:33:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:34:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:34:34: 'pyromancer' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:35:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:37:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:41:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:42:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:43:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:45:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:49:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:50:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:51:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:53:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:57:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:58:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:59:58: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:61:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/SkillFactory.java:4:8: Unused import - skills.KnightSkills.Execute. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/SkillFactory.java:5:8: Unused import - skills.KnightSkills.Slam. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:15:22: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:16:77: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:18:59: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:20: Comment matches to-do format 'TODO:'. [TodoComment]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:25:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:29:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'getBaseDamegePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'getBaseDamegePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:34:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:39:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:44:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:49:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:16:21: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:17:76: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:19:58: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:27:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:31:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:35:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getNumberOfHits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getNumberOfHits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:40:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:45:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:50:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:55:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:13:18: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:13:33: Parameter opponentHero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:14:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:17:43: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:18:62: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:22:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:26:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getPrecentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getPrecentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:30:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getPercentagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getPercentagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:35:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:40:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:45:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Drain.java:50:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:13:20: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:13:35: Parameter opponentHero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:14:74: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:16:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:18:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:22:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:26:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getPrecentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getPrecentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:30:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getPercentagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getPercentagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:35:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:40:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:45:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/proiect_poo/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:50:23: Parameter rogue should be final. [FinalParameters]
Audit done.
Checkstyle ends with 402 errors.
