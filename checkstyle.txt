Starting audit...
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/common/Constants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/common/Constants.java:21:29: Name 'XP_FORMULA_2_' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/common/Constants.java:21:42: '=' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:17:23: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:22:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:30:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:32:40: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:44:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:49:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:54:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:59:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:64:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:69:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:77:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:79: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:79:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:87:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:91:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:93:30: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:94:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:95:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Pyromancer.java:96:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:6: Class HeroFactory should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:8:28: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:8:28: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:10:32: Parameter heroType should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:10:49: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:11:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:15:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:17:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:19:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/HeroFactory.java:21:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:14:17: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:21: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:23:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getLocationHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getLocationHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:27:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setLocationHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setLocationHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:27:36: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:31:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'move' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'move' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:31:22: Parameter moveChar should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:32:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:33:56: '-' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:33:57: '-' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:34:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:35:56: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:35:57: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:36:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:37:56: '-' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:37:57: '-' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:38:18: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:39:56: '+' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:39:57: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:45:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:49:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:53:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:57:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:57:23: Parameter xp should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:61:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:65:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:65:26: Parameter level should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:69:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:76:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'increaseXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'increaseXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:76:28: Parameter hero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:78:55: '-' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:84:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:86:24: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:87:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:88:36: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Hero.java:89:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:17:19: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:22:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:30:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:32:77: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:44:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:49:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:54:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:59:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:64:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:69:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:77:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:79: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:79:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:87:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:91:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:93:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:94:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:95:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Wizard.java:96:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:4:1: Redundant import from the same package - heroes.Hero. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:17:18: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:22:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:38:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:40:75: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:44:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:49:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:54:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:59:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:64:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:69:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:77:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:79: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:79:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:87:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:91:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:93:25: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:94:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:95:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Rogue.java:96:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:17:19: Parameter locationHistory should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:22:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getDamageWithoutRaceModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:30:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:36:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:41:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:46:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:51:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:56:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:61:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:69:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:71: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:71:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:89:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:90:24: Parameter skill should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:94:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:96:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:97:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:98:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/heroes/Knight.java:99:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:3:1: Redundant import from the same package - main.LocationHistory. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19: Line is longer than 100 characters (found 197). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:12: More than 7 parameters (found 8). [ParameterNumber]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:22: Parameter numberOfLines should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:41: Parameter numberOfColumns should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:62: Parameter map should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:76: Parameter numberOfHeroes should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:96: Parameter heroes should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:120: Parameter locationHistories should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:161: Parameter numberOfRounds should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:19:181: Parameter moves should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:30:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:34:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfColumns' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfColumns' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:38:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:42:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfHeroes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfHeroes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:46:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getHeroes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getHeroes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:50:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getLocationHistories' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getLocationHistories' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:54:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNumberOfRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNumberOfRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:58:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getMoves' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getMoves' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:62:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:64:29: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:65:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:66:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:67:49: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:68:53: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:69:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:70:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:71:60: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInput.java:72:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:6:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:8:42: Parameter hero1 should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:8:54: Parameter hero2 should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:9:51: '==' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:10:51: '&&' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameLogic.java:11:51: '==' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:12:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:14:29: Parameter args should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:29:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:38:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:43:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:50:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:66:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:67:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/Main.java:73:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:7:28: Parameter x should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:7:35: Parameter y should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:12:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'getX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'getX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:16:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'setX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'setX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:16:22: Parameter x should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:20:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'getY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'getY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:24:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'setY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'setY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:24:22: Parameter y should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:28:5: Class 'LocationHistory' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'LocationHistory' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:30:35: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:31:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/LocationHistory.java:32:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:4:1: Redundant import from the same package - main.GameInput. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:5:1: Redundant import from the same package - main.GameInputLoader. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:8: Class GameInfo should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:15:25: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:15:25: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:17:22: Parameter gameInputLoader should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:19:22: 'map' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInfo.java:29:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:4:1: Redundant import from the same package - main.LocationHistory. [RedundantImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:14:28: Parameter inputPath should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:14:46: Parameter outputPath should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:19:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'load' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'load' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:24:33: '1000' is a magic number. [MagicNumber]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:25:35: '1000' is a magic number. [MagicNumber]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:39:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:41:20: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:48:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:53: Line is longer than 100 characters (found 113). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:53:92: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:62:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:65:20: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/main/GameInputLoader.java:80: Line is longer than 100 characters (found 132). [LineLength]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:3: Class MapSingleton should be declared as final. [FinalClass]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:7:29: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:7:29: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:9:22: Parameter map should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:9:31: 'map' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapSingleton.java:18:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/map/MapBlocks.java:3:54: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:18:20: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:20:75: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:22:57: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:27:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:31:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:35:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:36:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:40:66: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:46:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:46:30: 'knight' hides a field. [HiddenField]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:51:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Execute.java:56:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:12:17: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:13:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:15:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:20:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:24:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:28:22: Parameter hero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:35:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:40:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:45:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/KnightSkills/Slam.java:50:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:17:19: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:18:74: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:20:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:26:60: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:28:64: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:33:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:37:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:41:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getDamageOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getDamageOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:45:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getDamageOvertimePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getDamageOvertimePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:50:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:55:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:60:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Ignite.java:65:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:15:22: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:16:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:18:59: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:23:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:27:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:32:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:37:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:42:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/PyromancerSkills/Fireblast.java:47:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/SkillFactory.java:4:8: Unused import - skills.KnightSkills.Execute. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/SkillFactory.java:5:8: Unused import - skills.KnightSkills.Slam. [UnusedImports]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:15:22: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:16:77: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:18:59: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:20: Comment matches to-do format 'TODO:'. [TodoComment]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:25:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:29:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'getBaseDamegePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'getBaseDamegePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:34:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:39:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:44:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Paralysis.java:49:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:16:21: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:17:76: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:19:58: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:27:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:31:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getBaseDamagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getBaseDamagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:35:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getNumberOfHits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getNumberOfHits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:40:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:45:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:50:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/RogueSkills/Backstab.java:55:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:13:18: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:13:33: Parameter opponentHero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:14:72: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:17:43: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:18:62: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:22:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:26:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getPrecentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getPrecentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:30:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getPercentagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getPercentagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:35:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:40:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:45:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Drain.java:50:23: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:5: Using the '.*' form of import should be avoided - heroes.*. [AvoidStarImport]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:13:20: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:13:35: Parameter opponentHero should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:14:74: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:16:56: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:18:54: '*' should be on a new line. [OperatorWrap]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:22:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:26:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getPrecentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getPrecentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:30:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getPercentagePerLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getPercentagePerLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:35:23: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:40:23: Parameter knight should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:45:23: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/radu_patrascoiu/Desktop/Proiect POO/LeagueOfOOP/src/skills/WizardSkills/Deflect.java:50:23: Parameter rogue should be final. [FinalParameters]
Audit done.
Checkstyle ends with 306 errors.
