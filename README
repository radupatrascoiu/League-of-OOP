Patrascoiu Ion - Radu, 322 CD

Etapa 1:

    In implementarea problemei am folosit design pattern-ul "Visitor", care
se bazeaza pe conceptul de Double Dispatch, "Singleton", pentru crearea
hartii si "Factory", pentru crearea jucatorilor. Mecanismul implementarii
functioneaza in modul urmator: din clasa abstracta "Hero" se extind cele
4 clase de eroi: "Knight", "Pyromancer", "Rogue" si "Wizard". Interfata "Skill"
se va implementa in clasele ce reprezinta abilitatile eroilor, astfel acestea
reprezinta visitorii pentru obiectele "Visitable": heroes. Fiecare abilitate
va avea 4 metode de visit, una pentru fiecare erou in parte, astfel se va
profita de verificarea dinamica a tipurilor. Fiecare hero ca avea o metoda
play, in care se vor instantia abilitatile specifice si se vor pasa mai departe
prin intermediul metodei "accept".
    Damage overtime-ul este gandit intr-o clasa separata "Buff", care contine
campurile "damageOverTime" - damage-ul primit pe runda, iar "time"
timpul ramas pentru acest buff. In clasa "Effects" se contorizeaza damage-ul
dat, critica si numarul de lovituri.
    Am parsat fisierul de intrare cu ajutorul claselor GameInput si
GameInputLoader, pe care le-am avut drept model de la tema 1. In clasa Main
jocul incepe, se parcurg rundele, se verifica conditia de stun, se misca
jucatorii in functie de input, se calculeaza damage overtime-ul, iar eroii care
se afla in acelasi bloc, se lupta. La sfarsit de runda se calculeaza hp-ul, in
functie de damage-ul primit. Apoi urmeaza scrierea in fisier.


Etapa 2:

    In aceasta etapa am folosit design pattern-ul "Visitor", pentru ingeri,
"Observer" pentru a notifica Marele Magician de interactiunile dintre ingeri
si eroi si "Strategy" pentru ca fiecare erou sa-si aleaga strategi in functie
de conditiile jocului. Pentru Visitor, exista clasa abstracta Angel, din care
vor fi extinse celelalte clase de ingeri. Astfel se vor suprascrie metodele
de visit pentru fiecare erou in parte, folosind conceptul de Double Dispatch.
    Pentru Observer, am folosit interfata Notification, care va avea o metoda
"update", aceasta fiind suprascrisa de fiecare clasa de notificare(observer),
care implementeaza interfata. Pe langa aceasta, am implementat clasa abstracta
"Subjects", care va fi extinsa de "Hero", metoda "notifyUpdate" fiind apelata
pentru interactiunile importante.
    Pentru Strategy, am folosit interfata "Strategy", care va fi implementata
de clasele "DefensiveStrategy" si "OffensiveStrategy", care vor fi alese la
runtime de catre fiecare erou in parte, in functie de conditiile in care se
afla.
    De asemenea, am folosit Factory pentru ingeri si Singleton pentru Marele
Magician. Flow ul jocului este asemenator cu cel din prima etapa, doar ca
la inceputul unei runde, dupa ce a luat damage-ul overtime(daca exista),
ficare erou alege o strategie, iar la finalul fiecarei runde, ingerii
actioneaza asupra eroilor, Marele Magician fiind notificat de acest aspect.